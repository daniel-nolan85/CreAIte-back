import User from '../models/user.js';
import Subscriber from '../models/subscriber.js';
import nodemailer from 'nodemailer';
import moment from 'moment';

export const fetchUser = async (req, res) => {
  const { _id } = req.body;
  try {
    const user = await User.findOne({
      _id,
    });
    res.json(user);
  } catch (err) {
    res.status(400);
    throw new Error(err.message);
  }
};

export const updateProfile = async (req, res) => {
  const { _id, name, bio } = req.body;
  try {
    const data = {};
    if (name) {
      data.name = name;
    }
    if (bio) {
      data.bio = bio;
    }
    const user = await User.findByIdAndUpdate(_id, data, {
      new: true,
    });
    res.json(user);
  } catch (error) {
    console.error('Error updating user:', error.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

export const updateProfileImage = async (req, res) => {
  const { _id, profileImage } = req.body;
  try {
    const user = await User.findByIdAndUpdate(
      _id,
      { $set: { profileImage: profileImage } },
      { new: true }
    );

    res.json(user);
  } catch (error) {
    console.error('Error updating image:', error.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

export const updateCoverImage = async (req, res) => {
  const { _id, coverImage } = req.body;
  try {
    const user = await User.findByIdAndUpdate(
      _id,
      { $set: { coverImage: coverImage } },
      { new: true }
    );

    res.json(user);
  } catch (error) {
    console.error('Error updating image:', error.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

export const updateSubscription = async (req, res) => {
  const { _id, amount, planType, customOptions, subscriptionId } = req.body;
  try {
    const expiryDate = new Date();
    expiryDate.setMonth(expiryDate.getMonth() + 1);

    const subscriptionUpdates = {
      'subscription.startDate': new Date(),
      'subscription.cost': (amount / 100).toFixed(2),
      'subscription.expiry': expiryDate,
      'subscription.subscriptionId': subscriptionId,
      'subscription.cancelled': false,
    };

    if (planType === 'custom') {
      subscriptionUpdates['subscription.plan'] = 'custom';
      subscriptionUpdates['subscription.imagesRemaining'] =
        customOptions.numCreAItions;
      subscriptionUpdates['subscription.dalleVersion'] =
        customOptions.dallEVersion;
      subscriptionUpdates['subscription.gptVersion'] = customOptions.gptVersion;
      subscriptionUpdates['subscription.customerSupport'] =
        customOptions.customerSupport;
      subscriptionUpdates['monthlyAllocation'] = customOptions.numCreAItions;
    } else if (planType === 'deluxe') {
      subscriptionUpdates['subscription.plan'] = 'deluxe';
      subscriptionUpdates['subscription.imagesRemaining'] = 100;
      subscriptionUpdates['subscription.dalleVersion'] = 'Dall-E-3';
      subscriptionUpdates['subscription.gptVersion'] = 'GPT-3.5';
      subscriptionUpdates['subscription.customerSupport'] = 'Priority';
      subscriptionUpdates['monthlyAllocation'] = 100;
    } else if (planType === 'premium') {
      subscriptionUpdates['subscription.plan'] = 'premium';
      subscriptionUpdates['subscription.imagesRemaining'] = 200;
      subscriptionUpdates['subscription.dalleVersion'] = 'Dall-E-3';
      subscriptionUpdates['subscription.gptVersion'] = 'GPT-4 Turbo';
      subscriptionUpdates['subscription.customerSupport'] = 'Priority';
      subscriptionUpdates['monthlyAllocation'] = 200;
    }

    const user = await User.findByIdAndUpdate(
      _id,
      {
        $set: subscriptionUpdates,
      },
      { new: true }
    );

    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'support@creaite.media',
        pass: process.env.DREAMHOST_AUTHORIZATION,
      },
      secure: true,
    });

    let mailOptions = {
      from: 'support@creaite.media',
      to: user.email,
      subject: 'Thanks for subscribing to CreAIte',
      html: `
       <p>Dear ${user.name},</p>
       <p>We are thrilled to welcome you to the CreAIte community! Your ${
         planType.charAt(0).toUpperCase() + planType.slice(1)
       } Subscription is now active, and you have unlocked a world of features that will enhance your experience with our service. Here is what you can expect:</p>
       <ul>
        <li>Unlimited text generations powered by Chat ${
          user.subscription.gptVersion
        }</li>
        <li>Monthly allocation of ${
          user.monthlyAllocation
        } images generated by ${user.subscription.dalleVersion}</li>
        <li>${user.subscription.customerSupport} level customer support</li>
       </ul>
       <p>Your current subscription will run until ${moment(
         user.subscription.expiry
       ).format(
         'ddd, MMMM Do YYYY'
       )}, and is set to automatically renew each month at a cost of $${(
        amount / 100
      ).toFixed(
        2
      )}. You are free to cancel your subscription at any time by navigating to the Subscription page.</p> 
       <p>We are committed to providing you with the best experience possible, and we're here to support you every step of the way. If you have any questions, feedback, or need assistance, please don't hesitate to reach out to our customer support team.</p>
       <p>Thank you once again for choosing CreAIte. We're excited to have you on board!</p>
       <p>Best regards,</p>
       <p>Daniel Nolan</p>
       <p>Founder & CEO, CreAIte Media</p>
       `,
    };

    transporter.sendMail(mailOptions, (err, response) => {
      if (err) {
        res.status(500).send('Error sending email');
      } else {
        res.json(user);
      }
    });

    transporter.close();
  } catch (error) {
    console.error('Error updating image:', error.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

export const captureUserEmail = async (req, res) => {
  const { email } = req.body;
  try {
    const existingSubscriber = await Subscriber.findOne({ email });
    if (existingSubscriber) {
      return res.json({ message: 'Email already subscribed' });
    }

    const newSubscriber = await new Subscriber({
      email,
    }).save();
    res.status(201).json(newSubscriber);
  } catch (err) {
    res.status(500).json({ message: 'Internal server error' });
  }
};
